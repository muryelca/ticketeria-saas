version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ticketeria-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ticketeria-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ticketeria-postgres
    environment:
      POSTGRES_DB: ticketeria
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - ticketeria-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ticketeria-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ticketeria-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ticketeria-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ticketeria-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}

  # Backend API
  backend:
    build:
      context: ./backend/ticketeria-api
      dockerfile: Dockerfile
    container_name: ticketeria-backend
    environment:
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/ticketeria?schema=public"
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRATION: "1d"
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-admin}@rabbitmq:5672"
      REDIS_URL: "redis://:${REDIS_PASSWORD:-redis123}@redis:6379"
      SQALA_API_KEY: ${SQALA_API_KEY}
      SQALA_API_URL: "https://api.sqala.tech"
      NODE_ENV: "production"
      PORT: 3000
    expose:
      - "3000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ticketeria-network
    restart: unless-stopped
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm run start:prod
      "

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ticketeria-frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost/api}
      NEXT_PUBLIC_APP_NAME: "Ticketeria"
      NEXT_PUBLIC_APP_DESCRIPTION: "Sistema de venda de ingressos para eventos"
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - ticketeria-network
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

networks:
  ticketeria-network:
    driver: bridge

